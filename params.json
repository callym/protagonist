{"name":"Protagonist","tagline":"A Twine story format with power!","body":"## Features\r\n\r\n- Markdown support in passages\r\n- Embedded JavaScript support in passages\r\n- Easy-to-use helpers for getting story data, linking to passages, showing passages\r\n  inline, and much more\r\n- Light and dark theme\r\n- Global header and footer support\r\n- Save and load progress\r\n\r\n## Installing\r\n\r\n1. Launch Twine 2\r\n2. Click on the Formats link in the Twine 2 sidebar\r\n3. In the dialog that opens, click on the tab Add a New Format\r\n4. Paste this URL into the text box and click the +Add button:\r\n\r\n   ```\r\n   https://raw.githubusercontent.com/massivedanger/protagonist/v1.0.0-beta/dist/format.js\r\n   ```\r\n\r\n## Usage\r\n\r\n### Markdown\r\n\r\nMarkdown parsing is provided via [marked](https://github.com/chjj/marked). It supports\r\n[GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/)\r\nand no non-default options are set.\r\n\r\nOne addition to the Markdown parsing is support for Twine-style passage links with the\r\nformat of `[[Link Text|Passage Name]]` or `[[Link Text->Passage Name]]`. The alternate\r\n`[[Passage Name<-Link Text]]` format is not supported.\r\n\r\n### Embedded JavaScript\r\n\r\nAll passages support embedded JavaScript logic. That means you can do things like\r\nthis in your passage:\r\n\r\n```\r\n<% number = 1 %>\r\n\r\nHello! Your lucky number is <%= number %>\r\n```\r\n\r\nAnything within `<%` and `%>` is executed, but not shown in the browser. Anything within\r\n`<%=` and `%>` is executed and then the result is shown to the user. To learn more\r\nabout how this works under the hood, check out [lodash's template function](https://lodash.com/docs#template).\r\n\r\n### Checkpoints/saving\r\n\r\nProtagonist has built-in progress saving. To allow the use of the forward and back\r\nbuttons of the browser and to change the window's title upon reaching certain passages,\r\njust add the \"checkpoint\" tag to any passage. You can also use it as a helper like this:\r\n\r\n```\r\n<% story.checkpoint('Name of the checkpoint goes here') %>\r\n```\r\n\r\nIf you'd like to save all the progress, you'll need to call `story.save()` in your\r\npassage. As a convenience, you can specify a `saveLink` somewhere. I recommended\r\nin a header or footer passage (see Meta Passages for more info). To learn more about\r\nthe `saveLink`, see Helpers.\r\n\r\n### Helpers\r\n\r\nTo assist with common Twine usage, a set of default helpers are supplied that you\r\ncan use with the embedded JavaScript support.\r\n\r\n#### passage\r\n\r\nAccess to the current passage's data, including:\r\n\r\n**Properties**\r\n\r\n- `story` (Story): Parent Story object of this passage\r\n- `element` (jQuery element): jQuery representation of the source HTML element\r\n- `id` (number): Twine ID number of the passage\r\n- `name` (string): Name of the passage\r\n- `tags` (array[string]): All tags added to the passage\r\n- `source` (string): Raw HTML source\r\n\r\n**Functions**\r\n\r\n- `render()` (string): HTML output of the passage's Markdown source\r\n\r\n#### story\r\n\r\n**Properties**\r\n\r\n- `element` (jQuery element): jQuery representation of the source HTML element\r\n- `name` (string): Name of the story\r\n- `startPassageID` (number): Twine ID number of the first passage\r\n- `IFID` (string): [IFID](http://ifdb.tads.org/help-ifid) of the story\r\n- `creator` (string): Name of the software that output the story\r\n- `creatorVersion` (string): Version of the creator software\r\n- `history` (array[number]): All previous passages visited by the player, by ID\r\n- `state` (object): Custom story data set during play\r\n- `currentCheckpoint` (string): Name of the last checkpoint visited by the player\r\n- `atCheckpoint` (boolean): True if currently at a checkpoint passage\r\n- `config` (object): Custom data set at the start of play, but can change\r\n- `passages` (array[Passage]): All passages within the story\r\n- `serialized` (string): JSON representation of the player's current progress\r\n- `saveData` (object): Progress retrieved that has been saved previously\r\n- `previousPassage` (Passage): The passage visited before the current one\r\n- `nextPassage` (Passage): The passage visited after the current one\r\n- `helpers` (object): All the helpers available inside of a passage's context\r\n\r\n**Functions**\r\n\r\n- `getPassage(query:string|number)` (Passage): Retrieves the Passage object for\r\n  a passage by either its name or ID number\r\n- `goToPassage(query:string|number)` (void): Navigates the player to a passage\r\n  by either its name or ID number\r\n- `showPassage(query:string|number)` (string): Get a passage's rendered output\r\n  by either its name or ID number\r\n- `checkpoint(name:string)` (void): Manually trigger a checkpoint and change the\r\n  window's title to match the `name` provided\r\n- `save()` (boolean): Save the player's current progress to the browser's local\r\n  storage\r\n- `restore()` (boolean): Restore the player's saved progress\r\n- `reset()` (boolean): Reset the player's progress by removing all saved data\r\n\r\n#### state\r\n\r\nStore any player data inside of `state`. What player data means is up to you, but\r\n`state` is provided as a convenience. It's attached to the parent `story` object.\r\n\r\n#### config\r\n\r\nBy default, this will be an object with just a `darkTheme` attribute. However,\r\nany configuration set in your CONFIG passage will be parsed and added to this.\r\n\r\nThe properties below are ones specific to the story format that will be handled\r\nin a special way by default.\r\n\r\n**Properties**\r\n\r\n- `darkTheme` (boolean): Whether or not the dark theme is turned on. Defaults to\r\n  false for new stories.\r\n- `stylesheets` (array[string]): an array of URLs to stylesheets to be injected\r\n  into the page before play begins.\r\n\r\n#### link(text:string, passage:string|number)\r\n\r\nShow a link that, when clicked, navigates the player to the chosen passage.\r\n\r\n- `text`: what will be shown to the player as clickable text\r\n- `passage`: either the name of the passage or its Twine ID number\r\n\r\n```\r\n<%= link('Go outside', 'Outside') %>\r\n\r\n<%= link('Go to the passage with ID #2', 2) %>\r\n```\r\n\r\n#### showLink(text:string, passage:string|number)\r\n\r\nShow a link that, when clicked, inserts a passage's content inline.\r\n\r\n- `text`: what will be shown to the player as clickable text\r\n- `passage`: either the name of the passage or its Twine ID number\r\n\r\n```\r\n<%= showLink('Look outside', 'Outside') %>\r\n\r\n<%= showLink('Look at passage ID #2', 2) %>\r\n```\r\n\r\n#### show(passage:string|number)\r\n\r\nShow a passage's rendered content inline.\r\n\r\n- `passage`: either the name of the passage or its Twine ID number\r\n\r\n```\r\n<%= show('Outside') %>\r\n\r\n<%= show(2) %>\r\n```\r\n\r\n#### goTo(passage:string|number)\r\n\r\nNavigate the player to a passage.\r\n\r\n- `passage`: either the name of the passage or its Twine ID number\r\n\r\n```\r\n<%= goTo('Outside') %>\r\n\r\n<%= goTo(2) %>\r\n```\r\n\r\n#### random(choices:array)\r\n\r\nShow a random item from an array of items. For simple usage, a variable number\r\nof arguments can be supplied and a random item will be chosen from them.\r\n\r\n- `choices`: array of items to choose from\r\n\r\n```\r\n<%= random(['thing 1', 'thing 2', 'thing 3']) %>\r\n\r\n<%= random('thing 1', 'thing 2', 'thing 3') %>\r\n```\r\n\r\n#### randomNumber(min:number, max:number, floating:boolean)\r\n\r\nShow a random number based on a minimum and a maximum. Optionally, it can be a\r\nfloating point number.\r\n\r\n- `min`: the minimum number\r\n- `max`: the maximum number\r\n- `floating`: whether or not the chosen number should be floating point\r\n\r\n```\r\n<%= randomNumber(0, 100) %>\r\n\r\n<%= randomNumber(0, 1, true) %>\r\n```\r\n\r\n#### toggleHeader()\r\n\r\nToggles the HEADER meta passage's display\r\n\r\n#### toggleFooter()\r\n\r\nToggles the FOOTER meta passage's display\r\n\r\n#### toggleDarkTheme()\r\n\r\nToggles whether the dark theme is on or off\r\n\r\n#### saveLink(text:string)\r\n\r\nShow a link that, when clicked, saves the player's progress.\r\n\r\n- `text`: what will be shown to the player as clickable text\r\n\r\n```\r\n<%= saveLink('[save]') %>\r\n```\r\n\r\n#### restoreLink(text:string)\r\n\r\nShow a link that, when clicked, restores the player's progress.\r\n\r\n- `text`: what will be shown to the player as clickable text\r\n\r\n```\r\n<%= restoreLink('[restore]') %>\r\n```\r\n\r\n#### backLink(text:string)\r\n\r\nShow a link that, when clicked, takes the player back a passage.\r\n\r\n- `text`: what will be shown to the player as clickable text\r\n\r\n```\r\n<%= backLink('GO BACK!') %>\r\n```\r\n\r\n#### forwardLink(text:string)\r\n\r\nShow a link that, when clicked, takes the player forward a passage if they've\r\ngone back from it.\r\n\r\n- `text`: what will be shown to the player as clickable text\r\n\r\n```\r\n<%= forwardLink('Go back to the future. Or forward. One of those.') %>\r\n```\r\n\r\n### Third-party libraries\r\n\r\nIn addition to these custom helpers, a few third-party libraries are available within\r\na passage's JavaScript.\r\n\r\n- `$`: [jQuery](http://jquery.com/)\r\n- `_`: [lodash](https://lodash.com/)\r\n- `toml`: [toml-node](https://github.com/BinaryMuse/toml-node)\r\n\r\n### Meta passages\r\n\r\nA global header and footer passage can be shown at the top and bottom of your story.\r\nAll you have to do is create a passage named `HEADER` or `FOOTER` and they'll be\r\ndisplayed (at the top and bottom respectively).\r\n\r\nA passage named CONFIG can contain any valid [TOML](https://github.com/toml-lang/toml)\r\nand it'll be parsed and stored within `story.config`, which can be accessed from\r\nany passage. This is recommended for any data that won't change *or* for anything\r\nthat all passages will need right from the start.\r\n\r\n## Contributing\r\n\r\n- Check out the latest master to make sure the feature hasn't been implemented or\r\n  the bug hasn't been fixed yet.\r\n- Check out the issue tracker to make sure someone already hasn't requested it\r\n  and/or contributed it.\r\n- Fork the project.\r\n- Start a feature/bugfix branch.\r\n- Commit and push until you are happy with your contribution.\r\n- Make sure to add tests for it. This is important so I don't break it in a future\r\n  version unintentionally.\r\n- Try not to change the version number in your commits. If you want to have your\r\n  own version, that's fine. Just have the version change be a separate commit I\r\n  can cherry-pick around.\r\n\r\n## Special Thanks\r\n\r\n- [Chris Klimas](http://chrisklimas.com/) for [Twine](http://twinery.org/) and\r\n  [Snowman](https://bitbucket.org/klembot/snowman-2)\r\n- [Javy Gwaltney](http://antagonizethehorn.com/) for showing me the power of Twine\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}